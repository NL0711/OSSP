def get_orders():
    orders = []
    n = int(input("Enter the number of orders: "))
    for i in range(n):
        print(f"\nEnter details for Order {i + 1}:")
        order_id = int(input("  Order ID: "))
        burst_time = int(input("  Burst Time: "))
        arrival_time = int(input("  Arrival Time: "))
        orders.append([order_id, burst_time, arrival_time])
    return orders

def sort_by_arrival_time(orders):
    # Sort based on Arrival Time
    return sorted(orders, key=lambda x: x[2])

def sjf_scheduler(orders):
    """
    Input: List of orders as tuples (order_id, arrival_time, burst_time)
    Output: Execution order + waiting/turnaround times.
    """
    # Sort by arrival time, then burst time (SJF non-preemptive)
    orders_sorted = sorted(orders, key=lambda x: (x[1], x[2]))
    
    current_time = 0
    schedule = []
    wait_times = []
    turnaround_times = []
    
    for order in orders_sorted:
        order_id, arrival, burst = order
        start_time = max(current_time, arrival)
        wait = start_time - arrival
        completion = start_time + burst
        turnaround = completion - arrival
        
        schedule.append(order_id)
        wait_times.append(wait)
        turnaround_times.append(turnaround)
        current_time = completion
    
    return {
        "schedule": schedule,
        "wait_times": wait_times,
        "turnaround_times": turnaround_times
    }

def display_orders(orders, title):
    print(f"\n{title}")
    for order in orders:
        print(f"OrderID: {order[0]}, BurstTime: {order[1]}, ArrivalTime: {order[2]}")

orders = get_orders()
sorted_orders = sort_by_arrival_time(orders)
display_orders(sorted_orders, "Orders sorted by Arrival Time")
