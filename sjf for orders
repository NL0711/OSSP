def get_orders():
    orders = []
    n = int(input("Enter the number of orders: "))
    for i in range(n):
        print(f"\nEnter details for Order {i + 1}:")
        order_id = int(input("  Order ID: "))
        burst_time = int(input("  Burst Time: "))
        arrival_time = int(input("  Arrival Time: "))
        orders.append([order_id, burst_time, arrival_time])
    return orders

def sort_by_arrival_time(orders):
    sorted_orders = sorted(orders, key=lambda x: x[2])

    print("\nSorted by arrival time")
    for order in sorted_orders:
        print(f"OrderID: {order[0]}, BurstTime: {order[1]}, ArrivalTime: {order[2]}")

    return sorted_orders

def sjf_scheduler(orders):

    time = 0
    ready_queue = []
    results = {}
    while orders or ready_queue:
        
        #when first order arrives, move it to ready_queue
        while orders and orders[0][2] <= time:
            ready_queue.append(orders.pop(0))

        if ready_queue:
            #sort the ready queue by burst time (Shortest Job First)
            ready_queue.sort(key=lambda x: x[1])


            shortest_order = ready_queue.pop(0)

            #keep track of time quantum of the order
            start_time = time
            time += shortest_order[1]
            completion_time = time

            results[shortest_order[0]] = {
                "burst_time": shortest_order[1],
                "arrival_time": shortest_order[2],
                "completion_time": completion_time,
                "turnaround_time": completion_time - shortest_order[2],
                #wait time = turn around time - burst time
                "wait_time": (completion_time - shortest_order[2]) - shortest_order[1], 
                }
        else:
            time += 1

    return results

def print_results(result):

    total_wt = 0
    total_tat = 0
    print("OrderID\tBurst\tArrival\tCompletion\tWait\tTurnaround")

    for id, order in result.items():

      print(f"{id}\t{order['burst_time']}\t{order['arrival_time']}\t{order['completion_time']}\t\t{order['wait_time']}\t{order['turnaround_time']}")
    
      total_wt += order["wait_time"]
      total_tat += order["turnaround_time"]
    
    avg_wait = total_wt / len(result)
    avg_tat = total_tat / len(result)

    print(f"\nAvg Wait Time: {avg_wait}")
    print(f"Avg Turnaround Time: {avg_tat}")

orders = get_orders()
sorted_orders = sort_by_arrival_time(orders)
results = sjf_scheduler(sorted_orders)

print("\nUsing SJF:")
print_results(results)
